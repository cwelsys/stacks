volumes:
  sonarr:
    external: true
  radarr:
    external: true
  lidarr:
    external: true
  prowlarr:
    external: true
  whisparr:
    external: true
  overseerr:
    external: true
  maintainerr:
    external: true
  tautulli:
    external: true
  recommendarr:
    external: true
  readarr:
    external: true
  flows:
    external: true
  hydra:
    external: true
  cweb:
    external: true

services:
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=${ID}
      - TZ=${TZ}
    volumes:
      - sonarr:/config
      - ${RUST}:/data
      - ${CONFIGDIR}/arr/sonarr/custom-services.d:/custom-services.d
      - ${CONFIGDIR}/arr/sonarr/custom-cont-init.d:/custom-cont-init.d
      - ${CONFIGDIR}/arr/sonarr/rconfig.yaml:/config/extended/rconfig.yaml
      - ${CONFIGDIR}/arr/sonarr/extended.conf:/config/extended.conf
    restart: always
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', 'http://127.0.0.1:8989/ping' ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - homepage.group=Media
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.href=https://sonarr.${DOMAIN}
      - homepage.description=TV Series management
      - homepage.widget.type=sonarr
      - homepage.widget.url=http://sonarr:8989
      - homepage.widget.key=${SONARR_API_KEY}
      - docker-volume-backup.stop-during-backup=true
    networks:
      - internal
      - media

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=${ID}
      - TZ=${TZ}
    volumes:
      - radarr:/config
      - ${RUST}:/data
      - ${CONFIGDIR}/arr/radarr/custom-services.d:/custom-services.d
      - ${CONFIGDIR}/arr/radarr/custom-cont-init.d:/custom-cont-init.d
      - ${CONFIGDIR}/arr/radarr/rconfig.yaml:/config/extended/rconfig.yaml
      - ${CONFIGDIR}/arr/radarr/extended.conf:/config/extended.conf
    restart: always
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', 'http://127.0.0.1:7878/ping' ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - homepage.group=Media
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.href=https://radarr.${DOMAIN}
      - homepage.description=Movies management
      - homepage.widget.type=radarr
      - homepage.widget.url=http://radarr:7878
      - homepage.widget.key=${RADARR_API_KEY}
      - docker-volume-backup.stop-during-backup=true
    networks:
      - internal
      - media

  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=${ID}
      - TZ=${TZ}
    volumes:
      - lidarr:/config
      - ${RUST}:/data
      - ${CONFIGDIR}/arr/lidarr/custom-services.d:/custom-services.d
      - ${CONFIGDIR}/arr/lidarr/custom-cont-init.d:/custom-cont-init.d
    restart: always
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', 'http://127.0.0.1:8686/ping' ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
      - homepage.group=Media
      - homepage.name=Lidarr
      - homepage.icon=lidarr.png
      - homepage.href=https://lidarr.${DOMAIN}
      - homepage.description=Music management
      - homepage.widget.type=lidarr
      - homepage.widget.url=http://lidarr:8686
      - homepage.widget.key=${LIDARR_API_KEY}
      - docker-volume-backup.stop-during-backup=true
    networks:
      - internal
      - media

  readarr:
    image: linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=1000
      - PGID=${ID}
      - TZ=${TZ}
    volumes:
      - readarr:/config
      - ${RUST}:/data
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', 'http://127.0.0.1:8787/ping' ]
      interval: 30s
      retries: 10
    restart: unless-stopped
    networks:
     - media
     - internal
    labels:
     - traefik.enable=true
     - traefik.docker.network=internal
     - traefik.http.routers.readarr.rule=Host(`readarr.${DOMAIN}`)
     - traefik.http.services.readarr.loadbalancer.server.port=8787
     - homepage.group=Media
     - homepage.name=Readarr
     - homepage.icon=readarr.png
     - homepage.href=https://readarr.${DOMAIN}
     - homepage.description=Books management
     - homepage.widget.type=readarr
     - homepage.widget.url=http://readarr:8787
     - homepage.widget.key=${READARR_API_KEY}
     - docker-volume-backup.stop-during-backup=true

  calibre-web:
    image: crocodilestick/calibre-web-automated:latest
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - internal
      - media
    environment:
      - PUID=1000
      - PGID=${ID}
      - TZ=${TZ}
    volumes:
      - cweb:/config
      - ${RUST}/book/ing:/cwa-book-ingest
      - ${RUST}/book:/calibre-library
    labels:
     - traefik.enable=true
     - traefik.docker.network=internal
     - traefik.http.routers.calibre.rule=Host(`calibre.${DOMAIN}`)
     - traefik.http.services.calibre.loadbalancer.server.port=8083
     - homepage.group=Media
     - homepage.name=Calibre Web
     - homepage.icon=calibre-web.png
     - homepage.href=https://calibre.${DOMAIN}
     - homepage.description=Books
     - docker-volume-backup.stop-during-backup=true

  calibre-web-automated-book-downloader:
    image: ghcr.io/calibrain/calibre-web-automated-book-downloader:latest
    container_name: bookr
    restart: unless-stopped
    networks:
      - internal
      - media
    environment:
      FLASK_PORT: 8084
      LOG_LEVEL: info
      BOOK_LANGUAGE: en
      USE_BOOK_TITLE: true
      TZ: ${TZ}
      APP_ENV: prod
      UID: 1000
      GID: ${ID}
    volumes:
      - ${RUST}/book/ing:/cwa-book-ingest
    labels:
     - traefik.enable=true
     - traefik.docker.network=internal
     - traefik.http.routers.bookr.rule=Host(`bookr.${DOMAIN}`)
     - traefik.http.services.bookr.loadbalancer.server.port=8084
     - homepage.group=Media
     - homepage.name=Book getter
     - homepage.icon=calibre.png
     - homepage.href=https://bookr.${DOMAIN}

  whisparr:
    container_name: whisparr
    image: ghcr.io/hotio/whisparr:v3
    networks:
      - internal
      - media
    environment:
      - PUID=1000
      - PGID=${ID}
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - whisparr:/config
      - ${RUST}:/data
    labels:
     - traefik.enable=true
     - traefik.docker.network=internal
     - traefik.http.routers.whisparr.rule=Host(`whisparr.${DOMAIN}`)
     - traefik.http.services.whisparr.loadbalancer.server.port=6969
     - homepage.group=Media
     - homepage.name=whisparr
     - homepage.icon=whisparr.png
     - homepage.href=https://whisparr.${DOMAIN}
     - homepage.description=Stash management
     - docker-volume-backup.stop-during-backup=true

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=${ID}
      - TZ=${TZ}
    volumes:
      - prowlarr:/config
    restart: always
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', 'http://127.0.0.1:9696/ping' ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      - homepage.group=Download
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=https://prowlarr.${DOMAIN}
      - homepage.description=Indexers management
      - homepage.widget.type=prowlarr
      - homepage.widget.url=http://prowlarr:9696
      - homepage.widget.key=${PROWLARR_API_KEY}
      - docker-volume-backup.stop-during-backup=true
    networks:
      - internal
      - media

  flaresolverr:
    image: 21hsmw/flaresolverr:nodriver
    container_name: flaresolverr
    restart: always
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.flaresolverr.loadbalancer.server.port=8191
    networks:
      - internal

  unpackerr:
    image: ghcr.io/unpackerr/unpackerr:latest
    container_name: unpackerr
    volumes:
      - ${RUST}/tor:/data/tor
    restart: always
    user: ${ID}:${ID}
    environment:
      - TZ=${TZ}
      - UN_SONARR_0_URL=http://sonarr:8989/
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}
      - UN_RADARR_0_URL=http://radarr:7878/
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}
    security_opt:
      - no-new-privileges:true
    networks:
      - media

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=1000
      - PGID=${ID}
      - TZ=${TZ}
    volumes:
      - overseerr:/config
    restart: unless-stopped
    ports:
      - 5055:5055
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr.rule=Host(`req.${DOMAIN}`)
      - traefik.docker.network=public
      - traefik.http.services.overseerr.loadbalancer.server.port=5055
      - kop.namespace=public
      - homepage.group=Media
      - homepage.name=Overseerr
      - homepage.icon=overseerr.png
      - homepage.href=https://req.${DOMAIN}
      - homepage.description=Requests management
      - docker-volume-backup.stop-during-backup=true
      # - homepage.widget.type=overseerr
      # - homepage.widget.url=http://overseerr:5055
      # - homepage.widget.key=${OVERSEERR_API_KEY}
    networks:
      - public
      - media

  maintainerr:
    image: ghcr.io/jorenn92/maintainerr:latest # or jorenn92/maintainerr:latest
    container_name: maintainerr
    user: ${ID}:${ID}
    networks:
      - internal
      - media
    volumes:
      - maintainerr:/opt/data
    environment:
      - TZ=${TZ}
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.maintainerr.rule=Host(`maintainerr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.maintainerr.loadbalancer.server.port=6246
      - homepage.group=Media
      - homepage.name=Maintainerr
      - homepage.icon=maintainerr.png
      - homepage.href=https://maintainerr.${DOMAIN}
      - homepage.description=Library maintenance
      - docker-volume-backup.stop-during-backup=true

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - PUID=1000
      - PGID=${ID}
      - TZ=${TZ}
    volumes:
      - tautulli:/config
    networks:
      - internal
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.tautulli.rule=Host(`tautulli.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.tautulli.loadbalancer.server.port=8181
      - homepage.group=Media
      - homepage.name=Tautulli
      - homepage.icon=tautulli.png
      - homepage.href=https://tautulli.${DOMAIN}
      - homepage.description=Plex monitoring and statistics
      - homepage.widget.type=tautulli
      - homepage.widget.url=http://tautulli:8181
      - homepage.widget.key=${TAUTULLI_API_KEY}

  recommendarr:
    image: tannermiddleton/recommendarr:latest
    container_name: recommendarr
    environment:
      - PUID=1000
      - PGID=${ID}
      - TZ=${TZ}
      - NODE_ENV=production
      - DOCKER_ENV=false
      - PORT=3000
      - PUBLIC_URL=https://recommendarr.${DOMAIN}
      - FORCE_SECURE_COOKIES=true
    volumes:
      - recommendarr:/app/server/data
    restart: unless-stopped
    networks:
      - internal
    labels:
      - traefik.enable=true
      - traefik.http.routers.recommendarr.rule=Host(`recommendarr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.recommendarr.loadbalancer.server.port=3000
      - homepage.group=Media
      - homepage.name=Recommendarr
      - homepage.icon=/images/recommendarr.png
      - homepage.href=https://recommendarr.${DOMAIN}
      - homepage.description=Media recommendations
      - docker-volume-backup.stop-during-backup=true

  fileflows:
    image: revenz/fileflows
    restart: unless-stopped
    container_name: fileflows
    runtime: nvidia
    networks:
      - internal
      - media
    environment:
      - TempPathHost=/mnt/cache/cache1/.cache/transcache
      - TZ=${TZ}
      - PUID=1000
      - PGID=${ID}
      - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /mnt/cache/cache1/.cache/transcache:/temp
      - ${RUST}:/data
      - flows:/app/Data
      - flows:/app/Logs
      - flows:/app/common
    labels:
      - traefik.enable=true
      - traefik.http.routers.fileflows.rule=Host(`flows.${DOMAIN}`)
      - traefik.http.services.fileflows.loadbalancer.server.port=5000
      - traefik.docker.network=internal
      - homepage.group=Media
      - homepage.name=fileflows
      - homepage.icon=fileflows.png
      - homepage.href=https://flows.${DOMAIN}
      - homepage.description=Transcoding
      - docker-volume-backup.stop-during-backup=true

  nzbhydra2:
    image: lscr.io/linuxserver/nzbhydra2:latest
    container_name: nzbhydra2
    networks:
      - internal
      - media
    environment:
      - PUID=1000
      - PGID=${ID}
      - TZ=${TZ}
    volumes:
      - hydra:/config
      - ${RUST}:/downloads
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.hydra.rule=Host(`hydra.${DOMAIN}`)
      - traefik.http.services.hydra.loadbalancer.server.port=5076
      - traefik.docker.network=internal
      - homepage.group=Download
      - homepage.name=nzbhydra2
      - homepage.icon=/images/nzbhydra2.png
      - homepage.href=https://hydra.${DOMAIN}
      - homepage.description=Indexers
      - docker-volume-backup.stop-during-backup=true
