services:
  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/overseerr:/config
    restart: unless-stopped
    ports:
      - 5055:5055
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr.rule=Host(`req.${DOMAIN}`)
      - traefik.docker.network=public
      - traefik.http.services.overseerr.loadbalancer.server.port=5055
      - kop.namespace=public
    networks:
      - public
      - media
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    networks:
      - internal
      - media
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/bazarr:/config
      - ${RUST}/movie:/movies
      - ${RUST}/tv:/tv
      - ${RUST}/anime:/anime
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=Host(`bazarr.${CASA}`)
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
      - traefik.docker.network=internal

  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/lidarr/app:/config
      - ${RUST}:/data
      - ${DOCKERM}/lidarr/scripts/init:/custom-cont-init.d
      - ${DOCKERM}/lidarr/scripts/service:/custom-services.d
    restart: always
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://127.0.0.1:8686/ping']
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=Host(`lidarr.${CASA}`)
      - traefik.docker.network=internal
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
    networks:
      - internal
      - media

  readarr:
    image: linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/readarr:/config
      - ${RUST}:/data
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://127.0.0.1:8787/ping']
      interval: 30s
      retries: 10
    restart: unless-stopped
    networks:
      - media
      - internal
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal
      - traefik.http.routers.readarr.rule=Host(`readarr.${CASA}`)
      - traefik.http.services.readarr.loadbalancer.server.port=8787

  # maintainerr:
  #   image: ghcr.io/jorenn92/maintainerr:latest # or jorenn92/maintainerr:latest
  #   container_name: maintainerr
  #   user: 1001:1001
  #   networks:
  #     - internal
  #     - media
  #   volumes:
  #     - ${DOCKERM}/maintainerr:/opt/data
  #   environment:
  #     - TZ=${TZ}
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.maintainerr.rule=Host(`maintainerr.${CASA}`)
  #     - traefik.docker.network=internal
  #     - traefik.http.services.maintainerr.loadbalancer.server.port=6246

  recommendarr:
    image: tannermiddleton/recommendarr:latest
    container_name: recommendarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
      - NODE_ENV=production
      - DOCKER_ENV=false
      - PORT=3000
      - PUBLIC_URL=https://recommendarr.${CASA}
      - FORCE_SECURE_COOKIES=true
    volumes:
      - ${DOCKERM}/recommendarr:/app/server/data
    restart: unless-stopped
    networks:
      - internal
    labels:
      - traefik.enable=true
      - traefik.http.routers.recommendarr.rule=Host(`recommendarr.${CASA}`)
      - traefik.docker.network=internal
      - traefik.http.services.recommendarr.loadbalancer.server.port=3000

  autobrr:
    container_name: autobrr
    image: ghcr.io/autobrr/autobrr:latest
    restart: unless-stopped
    networks:
      - internal
      - media
    environment:
      - TZ=${TZ}
    user: 1000:1000
    volumes:
      - ${DOCKERM}/autobrr/config:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.autobrr.rule=Host(`brr.${CASA}`)
      - traefik.docker.network=internal
      - traefik.http.services.autobrr.loadbalancer.server.port=7474

  profilarr:
    image: santiagosayshey/profilarr:beta
    container_name: profilarr
    networks:
      - internal
      - media
    volumes:
      - ${DOCKERM}/profilarr:/config
    environment:
      - TZ=${TZ}
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.profilarr.rule=Host(`profilarr.${CASA}`)
      - traefik.docker.network=internal
      - traefik.http.services.profilarr.loadbalancer.server.port=6868
