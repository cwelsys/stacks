services:
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/sonarr:/config
      - ${RUST}:/data
      - /opt/arrscripts/sonarr/custom-services.d:/custom-services.d
      - /opt/arrscripts/sonarr/custom-cont-init.d:/custom-cont-init.d
      - /opt/arrscripts/sonarr/rconfig.yaml:/config/extended/rconfig.yaml
      - /opt/arrscripts/sonarr/extended.conf:/config/extended.conf
    restart: always
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', 'http://127.0.0.1:8989/ping' ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.sonarr.loadbalancer.server.port=8989

    networks:
      - internal
      - media

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/radarr:/config
      - ${RUST}:/data
      - /opt/arrscripts/radarr/custom-services.d:/custom-services.d
      - /opt/arrscripts/radarr/custom-cont-init.d:/custom-cont-init.d
      - /opt/arrscripts/radarr/rconfig.yaml:/config/extended/rconfig.yaml
      - /opt/arrscripts/radarr/extended.conf:/config/extended.conf
    restart: always
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', 'http://127.0.0.1:7878/ping' ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.radarr.loadbalancer.server.port=7878
    networks:
      - internal
      - media

  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/lidarr:/config
      - ${RUST}:/data
      - /opt/arrscripts/lidarr/custom-services.d:/custom-services.d
      - /opt/arrscripts/lidarr/custom-cont-init.d:/custom-cont-init.d
    restart: always
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', 'http://127.0.0.1:8686/ping' ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
    networks:
      - internal
      - media

  readarr:
    image: linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/readarr:/config
      - ${RUST}:/data
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', 'http://127.0.0.1:8787/ping' ]
      interval: 30s
      retries: 10
    restart: unless-stopped
    networks:
     - media
     - internal
    labels:
     - traefik.enable=true
     - traefik.docker.network=internal
     - traefik.http.routers.readarr.rule=Host(`readarr.${DOMAIN}`)
     - traefik.http.services.readarr.loadbalancer.server.port=8787

  whisparr:
    container_name: whisparr
    image: ghcr.io/hotio/whisparr:v3-3.0.0.1027
    networks:
      - internal
      - media
    environment:
      - PUID=1000
      - PGID=1001
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/whisparr:/config
      - ${RUST}:/data
    labels:
     - traefik.enable=true
     - traefik.docker.network=internal
     - traefik.http.routers.whisparr.rule=Host(`whisparr.${DOMAIN}`)
     - traefik.http.services.whisparr.loadbalancer.server.port=6969

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/prowlarr:/config
    restart: always
    healthcheck:
      test: [ 'CMD', 'curl', '--fail', 'http://127.0.0.1:9696/ping' ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
    networks:
      - internal
      - media

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/overseerr:/config
    restart: unless-stopped
    ports:
      - 5055:5055
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr.rule=Host(`req.${DOMAIN}`)
      - traefik.docker.network=public
      - traefik.http.services.overseerr.loadbalancer.server.port=5055
      - kop.namespace=public
    networks:
      - public
      - media

  maintainerr:
    image: ghcr.io/jorenn92/maintainerr:latest # or jorenn92/maintainerr:latest
    container_name: maintainerr
    user: 1001:1001
    networks:
      - internal
      - media
    volumes:
      - ${DOCKERM}/maintainerr:/opt/data
    environment:
      - TZ=${TZ}
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.maintainerr.rule=Host(`maintainerr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.maintainerr.loadbalancer.server.port=6246

  recommendarr:
    image: tannermiddleton/recommendarr:latest
    container_name: recommendarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
      - NODE_ENV=production
      - DOCKER_ENV=false
      - PORT=3000
      - PUBLIC_URL=https://recommendarr.${DOMAIN}
      - FORCE_SECURE_COOKIES=true
    volumes:
      - ${DOCKERM}/recommendarr:/app/server/data
    restart: unless-stopped
    networks:
      - internal
    labels:
      - traefik.enable=true
      - traefik.http.routers.recommendarr.rule=Host(`recommendarr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.recommendarr.loadbalancer.server.port=3000

  flaresolverr:
    image: 21hsmw/flaresolverr:nodriver
    container_name: flaresolverr
    restart: always
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.flaresolverr.loadbalancer.server.port=8191
    networks:
      - internal

  unpackerr:
    image: ghcr.io/unpackerr/unpackerr:latest
    container_name: unpackerr
    volumes:
      - ${RUST}/tor:/data/tor
    restart: always
    user: 1001:1001
    environment:
      - TZ=${TZ}
      - UN_SONARR_0_URL=http://sonarr:8989/
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}
      - UN_RADARR_0_URL=http://radarr:7878/
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}
    security_opt:
      - no-new-privileges:true
    networks:
      - media

  autobrr:
    container_name: autobrr
    image: ghcr.io/autobrr/autobrr:latest
    restart: unless-stopped
    networks:
      - internal
      - media
    environment:
      - TZ=${TZ}
    user: 1000:1001
    volumes:
      - ${DOCKERM}/autobrr/config:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.autobrr.rule=Host(`brr.${DOMAIN}`)
      - traefik.docker.network=internal
      - traefik.http.services.autobrr.loadbalancer.server.port=7474

  decluttarr:
    image: ghcr.io/manimatter/decluttarr:latest
    container_name: decluttarr
    restart: always
    networks:
      - media
    environment:
      TZ: ${TZ}
      PUID: 1000
      PGID: 1001

      ## General
      # TEST_RUN: True
      # SSL_VERIFICATION: False
      LOG_LEVEL: INFO

      ## Features
      REMOVE_TIMER: 10
      REMOVE_FAILED: True
      REMOVE_FAILED_IMPORTS: True
      REMOVE_METADATA_MISSING: True
      REMOVE_MISSING_FILES: True
      REMOVE_ORPHANS: True
      REMOVE_SLOW: False
      REMOVE_STALLED: True
      REMOVE_UNMONITORED: True
      RUN_PERIODIC_RESCANS: '
        {
        "SONARR": {"MISSING": true, "CUTOFF_UNMET": true, "MAX_CONCURRENT_SCANS": 3, "MIN_DAYS_BEFORE_RESCAN": 7},
        "RADARR": {"MISSING": true, "CUTOFF_UNMET": true, "MAX_CONCURRENT_SCANS": 3, "MIN_DAYS_BEFORE_RESCAN": 7}
        }'

      # Feature Settings
      PERMITTED_ATTEMPTS: 3
      NO_STALLED_REMOVAL_QBIT_TAG: Don't Kill
      MIN_DOWNLOAD_SPEED: 100
      FAILED_IMPORT_MESSAGE_PATTERNS: '
        [
        "Not a Custom Format upgrade for existing",
        "Not an upgrade for existing"
        ]'

      ## Radarr
      RADARR_URL: http://radarr:7878
      RADARR_KEY: ${RADARR_API_KEY}

      ## Sonarr
      SONARR_URL: http://sonarr:8989
      SONARR_KEY: ${SONARR_API_KEY}

      ## Lidarr
      LIDARR_URL: http://lidarr:8686
      LIDARR_KEY: ${LIDARR_API_KEY}

      ## Readarr
      READARR_URL: http://readarr:8787
      READARR_KEY: ${READARR_API_KEY}

      ## Whisparr
      WHISPARR_URL: http://whisparr:6969
      WHISPARR_KEY: ${WHISPARR_API_KEY}

      ## qBitorrent
      QBITTORRENT_URL: http://gluetun:8080
      QBITTORRENT_USERNAME: admin
      QBITTORRENT_PASSWORD: $QBITTORRENT_PASSWORD
