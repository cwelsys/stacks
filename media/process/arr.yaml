services:
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/sonarr/app:/config
      - ${DOCKERM}/sonarr/scripts/init:/custom-cont-init.d
      - ${DOCKERM}/sonarr/scripts/service:/custom-services.d
      - ${DOCKERM}/sonarr/scripts/recyclarr.yaml:/config/extended/rconfig.yaml
      - ${RUST}:/data
    restart: always
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://127.0.0.1:8989/ping']
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${CASA}`)
      - traefik.docker.network=internal
      - traefik.http.services.sonarr.loadbalancer.server.port=8989

    networks:
      - internal
      - media

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/radarr/app:/config
      - ${RUST}:/data
      - ${DOCKERM}/radarr/scripts/init:/custom-cont-init.d
      - ${DOCKERM}/radarr/scripts/service:/custom-services.d
    restart: always
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://127.0.0.1:7878/ping']
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${CASA}`)
      - traefik.docker.network=internal
      - traefik.http.services.radarr.loadbalancer.server.port=7878
    networks:
      - internal
      - media

  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/lidarr/app:/config
      - ${RUST}:/data
      - ${DOCKERM}/lidarr/scripts/init:/custom-cont-init.d
      - ${DOCKERM}/lidarr/scripts/service:/custom-services.d
    restart: always
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://127.0.0.1:8686/ping']
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=Host(`lidarr.${CASA}`)
      - traefik.docker.network=internal
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
    networks:
      - internal
      - media

  whisparr:
    container_name: whisparr
    image: ghcr.io/hotio/whisparr:v3
    restart: unless-stopped
    networks:
      - internal
      - media
    environment:
      - PUID=1000
      - PGID=1001
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/whisparr:/config
      - ${RUST}:/data
    labels:
      - traefik.enable=true
      - traefik.docker.network=internal
      - traefik.http.routers.whisparr.rule=Host(`whisparr.${CASA}`)
      - traefik.http.services.whisparr.loadbalancer.server.port=6969

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1001
      - TZ=${TZ}
    volumes:
      - ${DOCKERM}/prowlarr:/config
    restart: always
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://127.0.0.1:9696/ping']
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${CASA}`)
      - traefik.docker.network=internal
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
    networks:
      - internal
      - media

  jellyseerr:
    image: ghcr.io/hotio/jellyseerr
    container_name: jellyseerr
    restart: always
    environment:
      - TZ=${TZ}
      - PUID=1000
      - PGID=1000
      - UMASK=002
    networks:
      - public
      - media
    ports:
      - '5055:5055'
    volumes:
      - ${DOCKERM}/jellyseerr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=Host(`req.${DOMAIN}`)
      - traefik.docker.network=public
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
      - kop.namespace=public

  flaresolverr:
    image: 21hsmw/flaresolverr:nodriver
    container_name: flaresolverr
    restart: always
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.${CASA}`)
      - traefik.docker.network=internal
      - traefik.http.services.flaresolverr.loadbalancer.server.port=8191
    networks:
      - internal

  decluttarr:
    image: ghcr.io/manimatter/decluttarr:latest
    container_name: decluttarr
    restart: always
    networks:
      - media
    environment:
      TZ: ${TZ}
      PUID: 1000
      PGID: 1001

      LOG_LEVEL: INFO
      TEST_RUN: False
      TIMER: 10

      # Jobs
      REMOVE_FAILED_DOWNLOADS: True
      REMOVE_FAILED_IMPORTS: True
      REMOVE_METADATA_MISSING: True
      REMOVE_MISSING_FILES: True
      REMOVE_ORPHANS: True
      REMOVE_SLOW: True
      REMOVE_STALLED: True
      REMOVE_UNMONITORED: True
      SEARCH_UNMET_CUTOFF: True
      SEARCH_MISSING: True

      # Instances
      SONARR_URL: "http://sonarr:8989"
      SONARR_KEY: "${SONARR_API_KEY}"

      # Download Clients
      QBITTORRENT_URL: "http://gluetun:8080"
      QBITTORRENT_USERNAME: "${QBIT_USERNAME}"
      QBITTORRENT_PASSWORD: "${QBIT_PASSWORD}"
      
      SABNZBD_URL: "http://sabnzbd:8080"
      SABNZBD_KEY: "${SABNZBD_API_KEY}"
  unpackerr:
    image: ghcr.io/unpackerr/unpackerr:latest
    container_name: unpackerr
    volumes:
      - ${RUST}/tor:/data/tor
    restart: always
    user: 1001:1001
    environment:
      - TZ=${TZ}
      - UN_SONARR_0_URL=http://sonarr:8989/
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}
      - UN_RADARR_0_URL=http://radarr:7878/
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}
    security_opt:
      - no-new-privileges:true
    networks:
      - media

  # overseerr:
  #   image: lscr.io/linuxserver/overseerr:latest
  #   container_name: overseerr
  #   environment:
  #     - PUID=1000
  #     - PGID=1001
  #     - TZ=${TZ}
  #   volumes:
  #     - ${DOCKERM}/overseerr:/config
  #   restart: unless-stopped
  #   ports:
  #     - 5055:5055
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.overseerr.rule=Host(`req.${DOMAIN}`)
  #     - traefik.docker.network=public
  #     - traefik.http.services.overseerr.loadbalancer.server.port=5055
  #     - kop.namespace=public
  #   networks:
  #     - public
  #     - media
  # bazarr:
  #   image: lscr.io/linuxserver/bazarr:latest
  #   container_name: bazarr
  #   networks:
  #     - internal
  #     - media
  #   environment:
  #     - PUID=1000
  #     - PGID=1001
  #     - TZ=${TZ}
  #   volumes:
  #     - ${DOCKERM}/bazarr:/config
  #     - ${RUST}/movie:/movies
  #     - ${RUST}/tv:/tv
  #     - ${RUST}/anime:/anime
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.bazarr.rule=Host(`bazarr.${CASA}`)
  #     - traefik.http.services.bazarr.loadbalancer.server.port=6767
  #     - traefik.docker.network=internal
  # maintainerr:
  #   image: ghcr.io/jorenn92/maintainerr:latest # or jorenn92/maintainerr:latest
  #   container_name: maintainerr
  #   user: 1001:1001
  #   networks:
  #     - internal
  #     - media
  #   volumes:
  #     - ${DOCKERM}/maintainerr:/opt/data
  #   environment:
  #     - TZ=${TZ}
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.maintainerr.rule=Host(`maintainerr.${CASA}`)
  #     - traefik.docker.network=internal
  #     - traefik.http.services.maintainerr.loadbalancer.server.port=6246
  # recommendarr:
  #   image: tannermiddleton/recommendarr:latest
  #   container_name: recommendarr
  #   environment:
  #     - PUID=1000
  #     - PGID=1001
  #     - TZ=${TZ}
  #     - NODE_ENV=production
  #     - DOCKER_ENV=false
  #     - PORT=3000
  #     - PUBLIC_URL=https://recommendarr.${CASA}
  #     - FORCE_SECURE_COOKIES=true
  #   volumes:
  #     - ${DOCKERM}/recommendarr:/app/server/data
  #   restart: unless-stopped
  #   networks:
  #     - internal
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.recommendarr.rule=Host(`recommendarr.${CASA}`)
  #     - traefik.docker.network=internal
  #     - traefik.http.services.recommendarr.loadbalancer.server.port=3000

  # autobrr:
  #   container_name: autobrr
  #   image: ghcr.io/autobrr/autobrr:latest
  #   restart: unless-stopped
  #   networks:
  #     - internal
  #     - media
  #   environment:
  #     - TZ=${TZ}
  #   user: 1000:1000
  #   volumes:
  #     - ${DOCKERM}/autobrr/config:/config
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.autobrr.rule=Host(`brr.${CASA}`)
  #     - traefik.docker.network=internal
  #     - traefik.http.services.autobrr.loadbalancer.server.port=7474

  # profilarr:
  #   image: santiagosayshey/profilarr:beta
  #   container_name: profilarr
  #   networks:
  #     - internal
  #     - media
  #   volumes:
  #     - ${DOCKERM}/profilarr:/config
  #   environment:
  #     - TZ=${TZ}
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.profilarr.rule=Host(`profilarr.${CASA}`)
  #     - traefik.docker.network=internal
  #     - traefik.http.services.profilarr.loadbalancer.server.port=6868
