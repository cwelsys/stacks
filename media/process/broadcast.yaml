services:
  bootstrap:
    container_name: broadcastarr-bootstrap
    image: docker.io/billos/broadcastarr:latest
    command: "start:bootstrap"
    networks:
      - stack
    volumes:
      - ${DOCKERM}/bcast/data:/data:rw
    environment:
      NODE_ENV: development
      LOG_LEVEL: debug
      LOG_DATA: true
      MONGO_URL: mongodb://mongo
      MONGO_AGENDA_DB: agenda
      MONGO_DB: broadcastarr
      DATA_FOLDER: /data
      # Bootstrap configuration
      DELAY_REGULAR_INDEX_CATEGORY: 300
      DELAY_RETRY_INDEX_CATEGORY: 60
      DELAY_RETRY_GRAB_BROADCAST_STREAM: 30
      DELAY_RETRY_UPDATE_CATEGORY_CHANNEL_NAME: 60
      DELAY_GRAB_STREAM: 10
      DELAY_JELLYFIN_LIVETV_REFRESH: 300
      DELAY_PUBLISH_GROUP: 5
      DELAY_UPDATE_CATEGORY_CHANNEL_NAME: 300
      DELAY_RENEW_STREAM: 30
      DELAY_SIMPLE_INDEX_CATEGORY: 60
      FUTURE_LIMIT: 7
      PAST_LIMIT: 1
      CATEGORIES_EMOJIS: '{"Sport":"‚öΩ","Football":"üèà","Basketball":"üèÄ","Baseball":"‚öæ","Hockey":"üèí"}'
      GROUPS: '{"Sport":["NBA","NFL","NHL","MLB","Premier League"]}'
      CREATE_PUBLISHER_DISCORD: false
      CREATE_PUBLISHER_MATRIX: false
      CREATE_PUBLISHER_GOTIFY: false
      CREATE_RELEASER_JELLYFIN: true
    deploy:
      resources:
        limits:
          memory: 4g
    restart: "no"
    depends_on:
      mongo:
        condition: service_healthy

  server:
    container_name: broadcastarr
    image: docker.io/billos/broadcastarr:latest
    command: "start:server"
    networks:
      - media
      - internal
      - stack
    volumes:
      - ${DOCKERM}/bcast/streams/m3u8:/bcast/streams/m3u8:rw
      - ${DOCKERM}/bcast/streams/images:/bcast/streams/images:rw
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.broadcastarr.rule=Host(`bcast.${CASA}`)"
      - traefik.docker.network=internal
      - "traefik.http.services.broadcastarr.loadbalancer.server.port=3000"
    environment:
      NODE_ENV: development
      MONGO_URL: mongodb://mongo
      MONGO_AGENDA_DB: agenda
      MONGO_DB: broadcastarr
      UID: 1000
      # silly, trace, debug, info, warn, error, fatal
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      # Print the data in the logs
      LOG_DATA: ${LOG_DATA:-true}
      # The port on which the server will listen
      PORT: 3000
      # The folder where the M3U8 files are stored, must be accessible by the Jellyfin container too at the same path
      M3U8_FOLDER: ${DOCKERM}/bcast/streams/m3u8
      IMAGES_FOLDER: ${DOCKERM}/bcast/streams/images
      TZ: ${TZ}
      # The user agent to use for the scrapper
      # USER_AGENT: ${USER_AGENT}
      # The URL of which you'll access the API
      BROADCASTARR_REMOTE_URL: https://bcast.${CASA}
      # The URL of the Jellyfin server
      JELLYFIN_URL: http://jellyfin:8096
      # The token to use to access the Jellyfin server
      JELLYFIN_TOKEN: ${JELLYFIN_API_KEY}
      # # The token of the user to use to send messages
      # DISCORD_USER_TOKEN: ${DISCORD_USER_TOKEN}
      # # The URL of the avatar to use for the webhook, can be empty
      # DISCORD_WEBHOOK_AVATAR: ${DISCORD_WEBHOOK_AVATAR}
      # # The username to use for the webhook, can be empty
      # DISCORD_WEBHOOK_USERNAME: ${DISCORD_WEBHOOK_USERNAME}
      # # Whether the Discord bot is active or not
      # DISCORD_BOT_ACTIVE: ${DISCORD_BOT_ACTIVE}
      # # The token of the Discord bot
      # DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      # # The client ID of the Discord bot
      # DISCORD_BOT_CLIENT_ID: ${DISCORD_BOT_CLIENT_ID}
      # MATRIX_URL: ${MATRIX_URL}
      # MATRIX_SERVER_NAME: ${MATRIX_SERVER_NAME}
      # MATRIX_USER: ${MATRIX_USER}
      # MATRIX_ACCESS_TOKEN: ${MATRIX_ACCESS_TOKEN}
      MATRIX_ADDITIONAL_ADMINS: ${MATRIX_ADDITIONAL_ADMINS:-}
      # GOTIFY_URL: ${GOTIFY_URL}
      # GOTIFY_TOKEN: ${GOTIFY_TOKEN}
    deploy:
      resources:
        limits:
          memory: 4g
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_healthy

  worker:
    extends:
      service: server
    container_name: worker
    command: "start:worker"

  mongo:
    image: docker.io/library/mongo:7.0
    container_name: mongo
    restart: unless-stopped
    networks:
      - stack
    volumes:
      - broadcastarr_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo/test --quiet
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  broadcastarr_data:
    external: true
