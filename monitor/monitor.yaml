volumes:
  influxdb:
    external: true
  influxdb-cfg:
    external: true
  loki:
    external: true
  promtail:
    external: true
  grafana:
    external: true
  vmetrics:
    external: true
  prom:
    external: true

services:
  influxdb:
    image: influxdb:2.7
    container_name: influxdb2
    restart: unless-stopped
    networks:
      - monitoring
    expose:
      - 8086
    environment:
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASS}
      - DOCKER_INFLUXDB_INIT_ORG=influx-org
      - DOCKER_INFLUXDB_INIT_BUCKET=influx-bucket
      - DOCKER_INFLUXDB_INIT_RETENTION=30d
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
      - DOCKER_INFLUXDB_INIT_MODE=setup
    volumes:
      - influxdb:/var/lib/influxdb2
      - influxdb-cfg:/etc/influxdb2
    labels:
      - docker-volume-backup.stop-during-backup=true

  loki:
    image: grafana/loki:2.9.11
    container_name: loki
    networks:
      - monitoring
    user: 1000:1000
    command: -config.file=/etc/loki/config.yml
    restart: unless-stopped
    expose:
      - 3100
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - loki:/etc/loki
      - ${CONFIGDIR}/monitoring/loki/config.yml:/etc/loki/config.yml
    labels:
      - docker-volume-backup.stop-during-backup=true

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    networks:
      - monitoring
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    expose:
      - 9080
    depends_on:
      - loki
    volumes:
      - /var/log:/var/log
      - promtail:/etc/promtail
      - ${CONFIGDIR}/monitoring/promtail/config.yml:/etc/promtail/config.yml
      - ${CONFIGDIR}/network/internal/log:/var/log/internal
      - ${CONFIGDIR}/network/external/log:/var/log/external
    labels:
      - docker-volume-backup.stop-during-backup=true

  grafana:
    image: grafana/grafana-oss:11.5.1
    container_name: grafana
    user: 1000:1000
    depends_on:
      - influxdb
      - loki
      - promtail
    restart: unless-stopped
    networks:
      - internal
      - monitoring
    environment:
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN}
    expose:
      - 3000
    volumes:
      - grafana:/var/lib/grafana
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.docker.network=internal
      # - homepage.group=Monitoring
      # - homepage.name=Grafana
      # - homepage.icon=grafana.png
      # - homepage.href=https://grafana.${DOMAIN}
      # - homepage.description=
      - docker-volume-backup.stop-during-backup=true

  victoriametrics:
    image: victoriametrics/victoria-metrics:v1.115.0
    container_name: victoriametrics
    restart: unless-stopped
    networks:
      - monitoring
      - crowdsec
      - internal
    expose:
      - 8428
    volumes:
      - vmetrics:/storage
    command:
      - "--storageDataPath=/storage"
      - "--httpListenAddr=:8428"
    labels:
      # - traefik.enable=true
      # - traefik.http.routers.victoriametrics.rule=Host(`victoriametrics.${DOMAIN}`)
      # - traefik.http.services.victoriametrics.loadbalancer.server.port=8428
      # - traefik.docker.network=internal
      # - homepage.group=Monitoring
      # - homepage.name=Vmetrics
      # - homepage.icon=victoriametrics.png
      # - homepage.href=https://victoriametrics.${DOMAIN}
      - docker-volume-backup.stop-during-backup=true

  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: node-exporter
  #   restart: unless-stopped
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   expose:
  #     - 9100
  #   networks:
  #     - monitoring

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   restart: unless-stopped
  #   networks:
  #     - monitoring
  #   volumes:
  #     - ${CONFIGDIR}/monitoring/prom/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prom:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'

