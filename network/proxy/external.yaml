services:
  traefike:
    container_name: traefike
    image: traefik:latest
    restart: unless-stopped
    networks:
      - public
      - traefik
      - crowdsec
      - monitor
    depends_on:
      - ext-redis
    ports:
      # - "80:80"
      # - "443:443"
      - '8080:8080'
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
      CS_TRAEFIK_BOUNCER_KEY: ${CS_TRAEFIK_BOUNCER_KEY}
      BOUNCER_HOST: ${BOUNCER_HOST}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
    volumes:
      - /var/log/traefik/external:/var/log/traefik:rw
      - ${DOCKERM}/traefik/external/static:/etc/traefik:rw
      - ${DOCKERM}/traefik/external/dynamic:/config/dynamic:rw
      - ${DOCKERM}/traefik/external/ban.html:/config/ban.html:ro
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    labels:
      traefik.enable: true
      traefik.http.routers.traefik-dashboard-external.rule: Host(`traefike.${DOMAIN}`)
      traefik.http.services.traefik-dashboard-external.loadbalancer.server.port: 8080
      kop.traefik-dashboard-external.bind.ip: '${SERVER_IP}'

  ext-logrotate:
    container_name: ext-logrotate
    image: vegardit/traefik-logrotate:latest
    network_mode: none
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw # required to send USR1 signal to Traefik after log rotation
      - /var/log/traefik/external:/var/log/traefik:rw # folder containing access.log file
    environment:
      TZ: ${TZ}
      # all environment variables are optional and show the default values:
      LOGROTATE_LOGS: '/var/log/traefik/*.log' # log files to rotate, directory must match volume mount
      LOGROTATE_TRIGGER_INTERVAL: daily # rotate daily, must be one of: daily, weekly, monthly, yearly
      LOGROTATE_TRIGGER_SIZE: 50M # rotate if log file size reaches 50MB
      LOGROTATE_MAX_BACKUPS: 7 # keep 14 backup copies per rotated log file
      LOGROTATE_START_INDEX: 1 # first rotated file is called access.1.log
      LOGROTATE_FILE_MODE: 0644 # file mode of the rotated file
      LOGROTATE_FILE_USER: root # owning user of the rotated file
      LOGROTATE_FILE_GROUP: root # owning group of the rotated file
      CRON_SCHEDULE: '* * * * *'
      CRON_LOG_LEVEL: 8 # see https://unix.stackexchange.com/a/414010/378036
      # command to determine the id of the container running Traefik:
      TRAEFIK_CONTAINER_ID_COMMAND: docker ps --no-trunc --quiet --filter label=org.opencontainers.image.title=Traefik

  ext-tlog:
    image: alpine
    container_name: ext-tlog
    volumes:
      - /var/log/traefik/external:/var/log:ro
    command: >
      sh -c "tail -F /var/log/access.log"
    network_mode: none
    restart: unless-stopped

  ext-redis:
    restart: always
    image: redis:7-alpine
    container_name: ext-redis
    ports:
      - '6380:6379'
    networks:
      - traefik
      - kop
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']

  cloudflare_tunnel:
    container_name: cf-tunnel
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel run --token ${CF_TRAEFIK_TUNNEL_TOKEN}
    environment:
      TUNNEL_METRICS: 0.0.0.0:20241
    networks:
      - traefik

  ext-sockp:
    image: lscr.io/linuxserver/socket-proxy:latest
    container_name: ext-sockp
    networks:
      - crowdsec
    environment:
      - CONTAINERS=1
      - EVENTS=1
      - INFO=1
      - LOG_LEVEL=info
      - NETWORKS=1
      - PING=1
      - POST=1
      - SERVICES=0
      - SESSION=0
      - SYSTEM=0
      - TASKS=0
      - VERSION=1
      - VOLUMES=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 2375:2375
    restart: always
    read_only: true
    tmpfs:
      - /run

  crowdsec:
    container_name: crowdsec
    image: 'crowdsecurity/crowdsec:latest'
    networks:
      - crowdsec
      - monitor
    environment:
      - COLLECTIONS=crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/whitelist-good-actors crowdsecurity/base-http-scenarios crowdsecurity/sshd crowdsecurity/linux crowdsecurity/appsec-crs crowdsecurity/appsec-generic-rules crowdsecurity/appsec-virtual-patching
      - 'DISABLE_SCENARIOS=crowdsecurity/http-bad-user-agent'
      - 'CUSTOM_HOSTNAME=pbox'
      - 'GID=1000'
      - 'LEVEL_INFO=true'
      - 'TZ=${TZ}'
    ports:
      - '4242:4242/tcp'
      - '6060:6060/tcp'
      # - "8086:8080/tcp"
    restart: 'always'
    volumes:
      - /var/log/messages:/var/log/messages:ro
      - /var/log/secure:/var/log/secure:ro
      - ${DOCKERM}/crowdsec/config:/etc/crowdsec
      - ${DOCKERM}/crowdsec/data:/var/lib/crowdsec/data
      - ${DOCKERM}/crowdsec/logs:/var/log/crowdsec
