services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: always
    command:
      - "--ping"
      - "--providers.docker=true" # enable docker provider
      - "--providers.docker.network=proxy" # define default network to monitor for docker provider
      - "--providers.docker.endpoint=tcp://socket-proxy:2375" # define socket-proxy as docker socket
      - "--providers.docker.exposedbydefault=false" # do not expose docker hosts per default
      - "--providers.file.watch=true" # monitor file provider for changes
      # - "--providers.file.filename=/rules/traefik.yml" 
      - "--providers.file.directory=/rules"
      - "--entrypoints.http.address=:80" # entrypoint for unencrypted http
      - "--entrypoints.http.forwardedHeaders.trustedIPs=103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,104.16.0.0/13,104.24.0.0/14,108.162.192.0/18,131.0.72.0/22,141.101.64.0/18,162.158.0.0/15,172.64.0.0/13,173.245.48.0/20,188.114.96.0/20,190.93.240.0/20,197.234.240.0/22,198.41.128.0/17,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32" # define cloudflare ip ranges as trusted
      - "--entrypoints.http.http.redirections.entryPoint.to=https" # automatic redirect from http to https
      - "--entrypoints.http.http.redirections.entryPoint.scheme=https" # automatic redirect from http to https
      - "--entrypoints.https.address=:443" # entrypoint for encrypted https
      - "--entrypoints.https.forwardedHeaders.trustedIPs=103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,104.16.0.0/13,104.24.0.0/14,108.162.192.0/18,131.0.72.0/22,141.101.64.0/18,162.158.0.0/15,172.64.0.0/13,173.245.48.0/20,188.114.96.0/20,190.93.240.0/20,197.234.240.0/22,198.41.128.0/17,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32" # define cloudflare ip ranges as trusted
      - "--entrypoints.https.http.middlewares=security-headers@file,rate-limit@file" # define default middlewares for all proxy entries
      - "--api=true"
      - "--api.dashboard=true" # enable traefik api dashboard
      - "--api.insecure=true" # expose traefik api dashboard on TCP/8080 without need for router
      - "--entrypoints.https.http.tls.certresolver=le" # define default cert resolver
      - "--entrypoints.https.http.tls.domains[0].main=cwel.sh" # define main domain, change to your domain
      - "--entrypoints.https.http.tls.domains[0].sans=*.cwel.sh" # define sans domain, change to your domain
      - "--certificatesresolvers.le.acme.email=${EMAIL}" # define your email address
      #- "--certificatesresolvers.le.acme.httpchallenge=true" # use http challenge
      #- "--certificatesresolvers.le.acme.httpchallenge.entrypoint=http" # define entrypoint for http challenge
      - "--certificatesresolvers.le.acme.dnschallenge=true" # enable dns challenge to obtain wildcard certificates
      - "--certificatesresolvers.le.acme.dnschallenge.provider=cloudflare" # define provider for certificates
      - "--certificatesresolvers.le.acme.storage=/acme.json" # define acme path for certificate information
      - "--certificatesresolvers.le.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53" # define dns servers for your resolver, here cloudflare
      - "--log.level=INFO" # enable log level
      - "--accesslog=true" # enable access logs
      - "--accesslog.filepath=/logs/traefik.log" # define access log path
      - "--accesslog.format=json" # set access log format to json instead clm
      - "--accesslog.bufferingsize=0" # set access log buffer size to 0
      - "--accesslog.filters.statuscodes=400-599" # only log http errors in logs; alternatively set 200-599 to include successful http requests
      - "--accesslog.fields.headers.defaultmode=drop" # drop all headers
      - "--accesslog.fields.headers.names.user-agent=keep" # keep user-agent header
      - "--serversTransport.insecureSkipVerify=true" # set insecureSkipVerify to true to allow self-signed certificates
    labels:
      - traefik.enable=true # enable traefik
      - traefik.http.routers.api.rule=Host(`traefik.${DOMAIN}`) # define subdomain for the traefik api dashboard
      - traefik.http.routers.api.service=api@internal # enable traefik api dashboard
      # - traefik.http.routers.api.middlewares=local-ipwhitelist@file,basic-auth@file
      - traefik.http.routers.traefik.middlewares=authentik@file 
      - "homepage.group=Infrastructure"
      - "homepage.name=Traefik"
      - "homepage.icon=traefik.png"
      - "homepage.href=http://traefik.${DOMAIN}/"
      - "homepage.description=Reverse Proxy & Load Balancer"    
    security_opt:
      - no-new-privileges:true
    ports:
      - 80:80 # http
      - 443:443 # https
      - 127.0.0.1:8089:8080 # http api dashboard
    expose:
      - 80 # http
      - 443 # https
      - 8089 # http api dashboard
    environment:
      - TZ=${TZ}
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API}
    volumes:
      - ${DOCKERDIR}/traefik/cert/acme.json:/acme.json
      - ${DOCKERDIR}/traefik/logs:/logs
      - ${DOCKERDIR}/traefik/rules:/rules
      # - /var/run/docker.sock:/var/run/docker.sock:ro #using socket proxy
    extra_hosts:
      - host.docker.internal:172.17.0.1
    networks:
      - proxy # define traefik docker network
      - docker-proxynet
    healthcheck:
      test:
        - CMD
        - traefik
        - healthcheck
        - --ping
      interval: 30s
      retries: 10

  socket-proxy:
    image: lscr.io/linuxserver/socket-proxy:1.26.2
    container_name: sockp
    environment:
      - CONTAINERS=1
      - EVENTS=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - docker-proxynet
    restart: always
    read_only: true
    tmpfs:
      - /run
      
  cloudflare:
    image: cloudflare/cloudflared:latest
    container_name: cloudflare
    restart: unless-stopped
    networks:
      - proxy
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    healthcheck:
      test:
        - CMD
        - cloudflared
        - --version
      interval: 60s
      timeout: 10s
      retries: 3

  crowdsec:
    image: crowdsecurity/crowdsec:v1.6.8
    container_name: crowdsec
    restart: unless-stopped
    ports:
      - 127.0.0.1:9876:8080 # port mapping for local firewall bouncers
    expose:
      - 8080 # http api for bouncers
      - 6060 # metrics endpoint for prometheus
      - 7422 # appsec waf endpoint
    volumes:
      # crowdsec container data
      - ${DOCKERDIR}/crowdsec/data:/var/lib/crowdsec/data
      - ${DOCKERDIR}/crowdsec/etc:/etc/crowdsec
      # log bind mounts into crowdsec
      - /var/log/auth.log:/var/log/auth.log:ro
      - /var/log/syslog:/var/log/syslog:ro
      - ${DOCKERDIR}/traefik/logs:/var/log/traefik:ro
    environment:
      - GID=1000
      - COLLECTIONS=crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/base-http-scenarios crowdsecurity/sshd crowdsecurity/linux crowdsecurity/appsec-generic-rules crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-crs
      #- CUSTOM_HOSTNAME=my-crowdsec-host123
    networks:
      - proxy
      



networks:
  proxy:
    external: true
  docker-proxynet:
    internal: true