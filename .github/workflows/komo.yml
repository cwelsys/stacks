name: Create GitHub Webhooks
on:
  workflow_dispatch:

jobs:
  create-webhooks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get stack names
        id: get_stacks
        run: |
          # Find directories that contain compose.yaml files
          STACKS=$(find . -maxdepth 2 -name "compose.yaml" | sed -e 's|./||' -e 's|/compose.yaml||' | grep -v "^\." | sort | tr '\n' ',' | sed 's/,$//')
          echo "STACK_NAMES=$STACKS" >> $GITHUB_OUTPUT
          echo "Found stacks: $STACKS"

      - name: Debug STACK_NAMES
        run: echo "STACK_NAMES=${{ steps.get_stacks.outputs.STACK_NAMES }}"

      - name: Create GitHub Webhooks
        run: |
          # Debug information
          echo "Checking API access..."
          CHECK_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.WEBHOOK_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}")
          echo "API access check status: $CHECK_RESPONSE"

          if [ "$CHECK_RESPONSE" != "200" ]; then
            echo "⚠️ PAT may not have proper permissions to access the repository"
            exit 1
          fi

          for STACK_NAME in ${STACK_NAMES//,/ }; do
            echo "Processing stack: $STACK_NAME"
            WEBHOOK_URL="https://komo.cwel.sh/listener/github/stack/$STACK_NAME/deploy"

            # Get existing hooks & check with jq if hook exists
            echo "Checking if webhook already exists..."
            HOOKS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.WEBHOOK_PAT }}" \
              "https://api.github.com/repos/${{ github.repository }}/hooks")

            if [ $? -ne 0 ]; then
              echo "⚠️ Failed to fetch existing webhooks"
              exit 1
            fi

            # Save hooks to file for debugging
            echo "$HOOKS_RESPONSE" > hooks.json

            WEBHOOK_EXISTS=$(echo "$HOOKS_RESPONSE" | jq -r --arg url "$WEBHOOK_URL" \
              'map(select(.config.url == $url)) | length')

            if [ "$WEBHOOK_EXISTS" -gt "0" ]; then
              echo "✓ Webhook for stack $STACK_NAME already exists, skipping..."
              continue
            fi

            echo "Creating webhook for stack $STACK_NAME with URL: $WEBHOOK_URL"

            # Create JSON payload
            jq -n \
              --arg url "$WEBHOOK_URL" \
              --arg secret "${{ secrets.KOMODO_WEBHOOK_SECRET }}" \
              '{
                name: "web",
                active: true,
                events: ["push"],
                config: {
                  url: $url,
                  content_type: "json",
                  secret: $secret
                }
              }' > webhook.json

            echo "Generated webhook JSON payload:"
            cat webhook.json

            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: token ${{ secrets.WEBHOOK_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/hooks" \
              -d @webhook.json)

            HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$RESPONSE" | sed '$ d')

            if [ "$HTTP_STATUS" -ne 201 ]; then
              echo "❌ Failed to create webhook for stack $STACK_NAME. Status: $HTTP_STATUS"
              echo "Response: $RESPONSE_BODY"
              exit 1
            else
              echo "✓ Successfully created webhook for stack $STACK_NAME"
            fi
          done
        env:
          STACK_NAMES: '${{ steps.get_stacks.outputs.STACK_NAMES }}'
