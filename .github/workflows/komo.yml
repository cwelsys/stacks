name: Komodo Webhook Wireup
on:
  workflow_dispatch:
  push:
    paths:
      - 'komodo.toml'
  schedule:
    - cron: '0 0 * * 1'

jobs:
  manage-webhooks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract stack names from komodo.toml
        id: komodo_stacks
        run: |
          # Use grep to extract stack names from komodo.toml
          # This pattern looks for lines with name = "stackname" inside [[stack]] sections
          STACKS=$(grep -A 1 '^\[\[stack\]\]' komodo.toml | grep 'name' | sed -E 's/name = "([^"]*)".*/\1/' | sort | tr '\n' ',' | sed 's/,$//')
          echo "KOMODO_STACK_NAMES=$STACKS" >> $GITHUB_OUTPUT
          echo "Found stacks in komodo.toml: $STACKS"

      - name: Debug KOMODO_STACK_NAMES
        run: echo "KOMODO_STACK_NAMES=${{ steps.komodo_stacks.outputs.KOMODO_STACK_NAMES }}"

      - name: Manage GitHub Webhooks
        run: |
          # Debug information
          echo "Checking API access..."
          CHECK_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.WEBHOOK_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}")
          echo "API access check status: $CHECK_RESPONSE"

          if [ "$CHECK_RESPONSE" != "200" ]; then
            echo "‚ö†Ô∏è PAT may not have proper permissions to access the repository"
            exit 1
          fi

          # Get all existing webhooks
          echo "Fetching all existing webhooks..."
          HOOKS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.WEBHOOK_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/hooks")

          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Failed to fetch existing webhooks"
            exit 1
          fi

          # Create an array from comma-separated stack names
          IFS=',' read -ra STACK_ARRAY <<< "$STACK_NAMES"

          # Create a lookup hash for quick existence checking
          declare -A STACK_EXISTS
          for stack in "${STACK_ARRAY[@]}"; do
            STACK_EXISTS[$stack]=1
          done

          # Process existing webhooks to find ones to remove
          echo "$HOOKS_RESPONSE" | jq -c '.[]' | while read -r hook; do
            HOOK_ID=$(echo "$hook" | jq -r '.id')
            HOOK_URL=$(echo "$hook" | jq -r '.config.url')

            # Check if this is a komodo webhook
            if [[ "$HOOK_URL" == *"komo.cwel.sh/listener/github/stack/"* && "$HOOK_URL" == *"/deploy" ]]; then
              # Extract stack name from URL
              HOOK_STACK=$(echo "$HOOK_URL" | sed -E 's|.*/stack/([^/]+)/deploy|\1|')

              # If stack doesn't exist in our lookup, delete the webhook
              if [ -z "${STACK_EXISTS[$HOOK_STACK]}" ]; then
                echo "üóëÔ∏è Removing webhook for non-existent stack: $HOOK_STACK (ID: $HOOK_ID)"

                DELETE_RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE \
                  -H "Authorization: token ${{ secrets.WEBHOOK_PAT }}" \
                  "https://api.github.com/repos/${{ github.repository }}/hooks/$HOOK_ID")

                DELETE_STATUS=$(echo "$DELETE_RESPONSE" | tail -n1)

                if [ "$DELETE_STATUS" -ne 204 ]; then
                  echo "‚ö†Ô∏è Failed to delete webhook for stack $HOOK_STACK. Status: $DELETE_STATUS"
                else
                  echo "‚úÖ Successfully removed webhook for stack $HOOK_STACK"
                fi
              fi
            fi
          done

          # Create webhooks for new stacks
          for STACK_NAME in ${STACK_NAMES//,/ }; do
            echo "Processing stack: $STACK_NAME"
            WEBHOOK_URL="https://komo.cwel.sh/listener/github/stack/$STACK_NAME/deploy"

            # Check if webhook exists
            WEBHOOK_EXISTS=$(echo "$HOOKS_RESPONSE" | jq -r --arg url "$WEBHOOK_URL" \
              'map(select(.config.url == $url)) | length')

            if [ "$WEBHOOK_EXISTS" -gt "0" ]; then
              echo "‚úì Webhook for stack $STACK_NAME already exists, skipping..."
              continue
            fi

            echo "Creating webhook for stack $STACK_NAME with URL: $WEBHOOK_URL"

            # Create JSON payload
            jq -n \
              --arg url "$WEBHOOK_URL" \
              --arg secret "${{ secrets.KOMODO_WEBHOOK_SECRET }}" \
              '{
                name: "web",
                active: true,
                events: ["push"],
                config: {
                  url: $url,
                  content_type: "json",
                  secret: $secret
                }
              }' > webhook.json

            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: token ${{ secrets.WEBHOOK_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/hooks" \
              -d @webhook.json)

            HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$RESPONSE" | sed '$ d')

            if [ "$HTTP_STATUS" -ne 201 ]; then
              echo "‚ùå Failed to create webhook for stack $STACK_NAME. Status: $HTTP_STATUS"
              echo "Response: $RESPONSE_BODY"
              exit 1
            else
              echo "‚úì Successfully created webhook for stack $STACK_NAME"
            fi
          done
        env:
          STACK_NAMES: '${{ steps.komodo_stacks.outputs.KOMODO_STACK_NAMES }}'
