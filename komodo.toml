[[server]]
name = "pbox"
[server.config]
address = "https://host.docker.internal:8120"
enabled = true

##

[[stack]]
name = "arr"
[stack.config]
server = "pbox"
run_directory = "arr"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
SONARR_API_KEY="op://Secrets/Sonarr/credential"
RADARR_API_KEY="op://Secrets/Radarr/credential"
LIDARR_API_KEY="op://Secrets/Lidarr/credential"
PROWLARR_API_KEY="op://Secrets/Prowlarr/credential"
OVERSEERR_API_KEY="op://Secrets/Overseerr/credential"
QBITTORRENT_USERNAME=admin
QBITTORRENT_PASSWORD="op://Secrets/qBit/password"
DOPLARR_TOKEN="op://Secrets/Doplarr/credential"
MEMBARR_TOKEN="op://Secrets/Membarr/credential"
TAUTULLI_API_KEY="op://Secrets/Tautulli/credential"
"""

##

[[stack]]
name = "auth"
[stack.config]
server = "pbox"
run_directory = "auth"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
PG_PASS="op://Secrets/Authentik/db_pass"
AUTHENTIK_SECRET_KEY="op://Secrets/Authentik/secret_key"
SMTPHOST=in-v3.mailjet.com
AUTHENTIK_EMAIL__PORT=25
SMTPUSER="op://Secrets/SMTP/API Key"
SMTPASS="op://Secrets/SMTP/Secret Key"

"""

##

[[stack]]
name = "dash"
[stack.config]
server = "pbox"
run_directory = "dash"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
HOMEPAGE_VAR_WEATHER_CITY=Arlington
HOMEPAGE_VAR_WEATHER_LAT=38.8816
HOMEPAGE_VAR_WEATHER_LONG=-77.0910
LINKDINGPASS="op://Secrets/Linkding/password"
"""

##

[[stack]]
name = "data"
[stack.config]
server = "pbox"
run_directory = "data"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
POSTGRES_PASSWORD="op://Secrets/2doyirimsnblvjuilo73gwfvgq/password"



"""

##

[[stack]]
name = "downs"
[stack.config]
server = "pbox"
run_directory = "downs"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
PIA_USER="op://Secrets/pia/username"
PIA_PASS="op://Secrets/pia/password"
QBITTORRENT_USERNAME=admin
QBITTORRENT_PASSWORD="op://Secrets/qBit/password"
SABNZBD_API_KEY="op://Secrets/Sabnzbd/credential"
WIREGUARD_PRIVATE_KEY="op://Secrets/Wireguard/credential"
GLUETUN_APIKEY="op://Secrets/Gluetun/credential"
"""

##

[[stack]]
name = "home"
[stack.config]
server = "pbox"
run_directory = "home"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
ACCESS_TOKEN="op://Secrets/Homeassistant/credential"
"""

##

[[stack]]
name = "media"
[stack.config]
server = "pbox"
run_directory = "media"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
PLEX_TOKEN="op://Secrets/Plex/credential"
JELLYFIN_API_KEY="op://Secrets/Jellyfin/credential"
"""

##

[[stack]]
name = "network"
[stack.config]
server = "pbox"
run_directory = "network"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
CLOUDFLARE_API="op://Secrets/Cloudflare/credential"
CLOUDFLARE_TUNNEL_TOKEN=op://Secrets/Cloudflare/boneyards
DASHBOARD_CREDENTIAL="op://Secrets/Traefik/password"
PLEX_TOKEN="op://Secrets/Plex/credential"
"""

##

[[stack]]
name = "osx"
[stack.config]
server = "pbox"
run_directory = "osx"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"

##

[[stack]]
name = "socket"
[stack.config]
server = "pbox"
run_directory = "socket"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
TS_AUTHKEY="op://Secrets/v4xfq7ijumolhvtybuk4hepdfy/password"
"""

##

[[stack]]
name = "system"
[stack.config]
server = "pbox"
run_directory = "system"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
# RAPIPASS="op://Secrets/Socket Remote Api/password"
CERT_HOSTNAME="op://Secrets/Socket Remote Api/username"
DISCORDURL="op://Secrets/CM Discord Webhook/credential"
"""

##

[[stack]]
name = "web"
[stack.config]
server = "pbox"
run_directory = "web"
additional_env_files = ["../global.env"]
git_account = "cwelsys"
repo = "cwelsys/stacks"
pre_deploy.command = """
OP_SERVICE_ACCOUNT_TOKEN=[[OP_SERVICE_ACCOUNT_TOKEN]] op inject -i .env -o .env --force
"""
environment = """
APP_SECRET="op://Secrets/Umami/credential"
UMAMI_DB_PASSWORD="op://Secrets/Umami/db"
"""

##

[[repo]]
name = "stacks"
[repo.config]
server = "pbox"
builder = "local"
git_account = "cwelsys"
repo = "cwelsys/stacks"

##

[[action]]
name = "update_stacks"
[action.config]
file_contents = """
const stacks = await komodo.read("ListStacks", {});

// First refresh the 'latest_hash' for all the stacks which have a deployed_hash
for (const stack of stacks) {
  if (stack.info.deployed_hash) {
    await komodo.write("RefreshStackCache", { stack: stack.name });
  }
}

// Get stacks again after refreshing the latest hash
const refreshed = await komodo.read("ListStacks", {});
for (const stack of refreshed) {
  // Check for different hash, and deploy
  if (stack.info.deployed_hash !== stack.info.latest_hash) {
    console.log(`Stack ${stack.name} has new commits. Redeploying...`);
    await komodo.execute("DeployStack", { stack: stack.name });
  }
}
"""

##

[[builder]]
name = "local"
[builder.config]
type = "Server"
params = {}

##

[[resource_sync]]
name = "pbox"
[resource_sync.config]
repo = "cwelsys/stacks"
git_account = "cwelsys"
resource_path = ["komodo.toml"]
managed = true