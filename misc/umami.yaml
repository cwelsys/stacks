volumes:
  umami-db:
    external: true

services:
  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    container_name: umami
    environment:
      DATABASE_URL: postgresql://umami:${UMAMI_DB_PASSWORD}@db:5432/umami
      DATABASE_TYPE: postgresql
      APP_SECRET: ${APP_SECRET}
    init: true
    restart: always
    ports:
      - '3000:3000'
    networks:
      - public
      - stack
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl http://localhost:3000/api/heartbeat']
      interval: 5s
      timeout: 5s
      retries: 5
    labels:
      - traefik.enable=true
      - traefik.http.routers.umami.rule=Host(`umami.${DOMAIN}`)
      - traefik.docker.network=public
      - traefik.http.services.umami.loadbalancer.server.port=3000
      # - traefik.http.routers.umami.middlewares=auth-proxy@docker
      - kop.namespace=public
      # - homepage.group=Apps
      # - homepage.name=Umami
      # - homepage.icon=umami.png
      # - homepage.href=https://umami.${DOMAIN}
      # - homepage.description=Web analytics

  db:
      image: postgres:15-alpine
      container_name: umami-db
      networks:
        - stack
      environment:
        POSTGRES_DB: umami
        POSTGRES_USER: umami
        POSTGRES_PASSWORD: ${UMAMI_DB_PASSWORD}
      volumes:
        - umami-db:/var/lib/postgresql/data
      restart: always
      labels:
        - docker-volume-backup.stop-during-backup=true
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
        interval: 5s
        timeout: 5s
        retries: 5




